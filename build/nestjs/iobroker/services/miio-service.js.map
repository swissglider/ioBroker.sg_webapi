{
  "version": 3,
  "sources": ["../../../../src/nestjs/iobroker/services/miio-service.ts"],
  "sourcesContent": ["import { Injectable } from '@nestjs/common';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport { AdapterStr, DEFAULT_TIMEOUT } from '../../main';\nimport { Result } from '../interfaces/result.interface';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { AuthMiIO, ApiMiIO } = require('miio-token-extractor');\n\nexport class MIIO_DTO {\n    @IsNotEmpty()\n    @IsString()\n    login!: string;\n\n    @IsNotEmpty()\n    @IsString()\n    password!: string;\n\n    @IsNotEmpty()\n    @IsString()\n    country!: string;\n\n    @IsOptional()\n    @IsNumber()\n    timeout!: number;\n}\n\nexport type Config_T = {\n    login: string;\n    password: string;\n    country?: string;\n};\n\nexport type SingleMapping_T = {\n    did: string;\n    name: string;\n    model: string;\n    isOnline: string;\n    localip: string;\n    parent_id: string;\n    token: string;\n    adapterName: string;\n    channelType: string;\n    room: string;\n    place: string;\n    ioBrokerChannelPath: string;\n};\n\ntype Result_T = { result?: SingleMapping_T[]; error?: string | Error };\n\ntype CachedResult_T = Record<string, { updateTime: number; result: Result_T }>; // auto || __login__password__countr__\n\nconst CACHE_RESULT: CachedResult_T = {};\n\nconst _getDeviceList = async ({ login, password, country = '' }: Config_T): Promise<any> => {\n    try {\n        const authMiIO = new AuthMiIO();\n        const apiMiIO = new ApiMiIO();\n        const { userId, token, ssecurity } = await authMiIO.login(login, password);\n        const devices = await apiMiIO.getDeviceList(userId, ssecurity, token, country);\n\n        const testResultPromise = await AdapterStr.adapter?.getForeignObjectsAsync('mihome.*', 'channel');\n        if (testResultPromise) {\n            console.log(\n                Object.fromEntries(\n                    Object.entries(testResultPromise).filter(([key]) => key.match(/^mihome\\.[0-9]\\.devices/i)),\n                ),\n            );\n        }\n\n        return devices;\n    } catch (error) {\n        throw error;\n    }\n};\n\nconst generateFullSimpleDeviceList = async (\n    configS: Config_T | undefined = undefined,\n    timeout = DEFAULT_TIMEOUT,\n): Promise<Result_T> => {\n    const promises: any[] = [];\n    const config = AdapterStr.adapter?.config;\n    const configA: Config_T[] = [];\n    if (!config) return { error: 'wrong configuration ??' };\n    if (!configS) {\n        if (config['MIIO_activatedConfig1']) {\n            configA.push({\n                login: config['MIIO_login1'],\n                password: config['MIIO_password1'],\n                country: config['MIIO_country1'],\n            });\n        }\n        if (config['MIIO_activatedConfig2']) {\n            configA.push({\n                login: config['MIIO_login2'],\n                password: config['MIIO_password2'],\n                country: config['MIIO_country2'],\n            });\n        }\n    } else {\n        configA.push(configS);\n    }\n    configA.forEach((e) => {\n        promises.push(_getDeviceList(e));\n    });\n    const timoutPromise = new Promise((resolve) => {\n        setTimeout(resolve, timeout, { error: `TimeoutError on miio test after ${timeout}ms` });\n    });\n\n    try {\n        const result1: any = await Promise.race([Promise.all(promises), timoutPromise]);\n        if (result1.hasOwnProperty('error')) {\n            return result1;\n        }\n\n        const result: SingleMapping_T[] = [];\n        result1.forEach((element: any[]) => {\n            result.push(\n                ...element.map((e: any) => {\n                    const subs = e.name.split(' ');\n                    return {\n                        did: e.did.split('.').pop(),\n                        name: e.name,\n                        model: e.model,\n                        isOnline: e.isOnline,\n                        localip: e.localip,\n                        parent_id: e.parent_id,\n                        token: e.token,\n                        adapterName: 'MiHome',\n                        channelType: subs[0] ? subs[0] : '',\n                        room: subs[1] ? subs[1] : '',\n                        place: subs[2] ? subs[2] : '',\n                        ioBrokerChannelPath: e.did,\n                    };\n                }),\n            );\n        });\n        return { result };\n    } catch (error: any) {\n        return { error: error.toString() };\n    }\n};\n\nexport const getFullSimpleDeviceList = async (\n    configS: Config_T | undefined = undefined,\n    timeout = DEFAULT_TIMEOUT,\n    forceRefresh = false,\n): Promise<Result_T> => {\n    const idString = configS ? `__${configS.login}__${configS.password}__${configS.country ?? ''}__` : 'auto';\n    const refreshTime =\n        AdapterStr.adapter?.config.hasOwnProperty('MIIO_autoRefreshTimeout') &&\n        AdapterStr.adapter.config['MIIO_autoRefreshTimeout']\n            ? AdapterStr.adapter.config['MIIO_autoRefreshTimeout']\n            : 50000;\n    forceRefresh = AdapterStr.adapter?.config['MIIO_autoRefresh'] ? forceRefresh : true;\n    const maxAge = Date.now() - refreshTime;\n    const cacheResult = CACHE_RESULT.hasOwnProperty(idString) ? CACHE_RESULT[idString] : undefined;\n    if (cacheResult && cacheResult.updateTime >= maxAge && !forceRefresh) {\n        return cacheResult.result;\n    }\n    const tmpResult = await generateFullSimpleDeviceList(configS, timeout);\n    CACHE_RESULT[idString] = {\n        updateTime: Date.now(),\n        result: tmpResult,\n    };\n\n    return tmpResult;\n};\n\n@Injectable()\nexport class MIIOService {\n    public getSimpleMapping = async ({\n        login,\n        password,\n        country,\n        timeout = DEFAULT_TIMEOUT,\n    }: MIIO_DTO): Promise<Result> => {\n        AdapterStr.adapter?.log.info('SendToService');\n        return generateFullSimpleDeviceList({ login, password, country }, timeout);\n    };\n\n    public getSimpleMappingAll = async (): Promise<Result> => {\n        return getFullSimpleDeviceList();\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
