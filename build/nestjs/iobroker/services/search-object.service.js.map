{
  "version": 3,
  "sources": ["../../../../src/nestjs/iobroker/services/search-object.service.ts"],
  "sourcesContent": ["import { BadRequestException, Injectable } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { IsNotEmpty, IsNumber, IsOptional, IsString, validate } from 'class-validator';\nimport { AdapterStr, DEFAULT_TIMEOUT } from '../../main';\nimport { ObjectType } from '../interfaces/object.type';\nimport { Result } from '../interfaces/result.interface';\n\nexport class SearchAllTypesWithNamePatternIncludes_DTO {\n    @IsNotEmpty()\n    @IsString()\n    type!: ObjectType | undefined;\n\n    @IsOptional()\n    @IsString()\n    pattern!: string | undefined;\n\n    @IsOptional()\n    @IsString()\n    path!: string | undefined;\n\n    @IsOptional()\n    @IsNumber()\n    timeout!: number | undefined;\n}\n\nexport class SearchAllTypesWithNamePatternIncludesBatch_DTO {\n    @IsOptional()\n    batch!: SearchAllTypesWithNamePatternIncludes_DTO[];\n\n    @IsOptional()\n    @IsNumber()\n    timeout!: number | undefined;\n}\n\nconst validateBatchDTO = async (batch: SearchAllTypesWithNamePatternIncludes_DTO[]): Promise<void> => {\n    if (!batch && !Array.isArray(batch)) {\n        throw new BadRequestException('Batch Parameter wrong configured');\n    }\n    for (const value of batch) {\n        const object = plainToInstance(SearchAllTypesWithNamePatternIncludes_DTO, value);\n        const errors = await validate(object, { whitelist: true, forbidNonWhitelisted: true });\n        if (errors.length > 0) {\n            console.log(errors);\n            throw new BadRequestException(Object.values((errors as any)[0].constraints));\n        }\n    }\n    return;\n};\n\n@Injectable()\nexport class SearchObjectService {\n    async searchAllTypesWithNamePatternIncludes({\n        type = undefined,\n        pattern = undefined,\n        path = '*',\n        timeout = DEFAULT_TIMEOUT,\n    }: SearchAllTypesWithNamePatternIncludes_DTO): Promise<Result> {\n        const testResultPromise = AdapterStr.adapter?.getForeignObjectsAsync(path, type);\n        const timoutPromise = new Promise((resolve) => {\n            setTimeout(resolve, timeout, { error: `TimeoutError on AllInstanceService after ${timeout}ms` });\n        });\n        const result = await Promise.race([testResultPromise, timoutPromise]);\n        if (result && typeof result === 'object' && !pattern) {\n            return { result };\n        }\n        if (result && typeof result === 'object') {\n            const newResult: Record<string, any> = {};\n            for (const [key, value] of Object.entries(result)) {\n                if (value.common.name && typeof value.common.name === 'string' && value.common.name.includes(pattern)) {\n                    newResult[key] = value;\n                    continue;\n                }\n                if (value.common.name && typeof value.common.name === 'object') {\n                    for (const val of Object.values(value.common.name)) {\n                        if (pattern && val && typeof val === 'string' && val.includes(pattern)) {\n                            newResult[key] = value;\n                            continue;\n                        }\n                    }\n                }\n            }\n            console.log(Object.keys(newResult));\n            return { result: newResult };\n        }\n        return { error: result };\n    }\n    async searchAllTypesWithNamePatternIncludesBatch({\n        batch = [],\n        timeout = DEFAULT_TIMEOUT,\n    }: SearchAllTypesWithNamePatternIncludesBatch_DTO): Promise<Result> {\n        await validateBatchDTO(batch);\n\n        const promises = [];\n        for (const { type = undefined, path = '*' } of batch) {\n            promises.push(AdapterStr.adapter?.getForeignObjectsAsync(path, type));\n        }\n        const allPromises = Promise.all(promises);\n        const timoutPromise = new Promise((resolve) => {\n            setTimeout(resolve, timeout, { error: `TimeoutError on AllInstanceService after ${timeout}ms` });\n        });\n        const rawResult = await Promise.race([allPromises, timoutPromise]);\n\n        if (!rawResult || typeof rawResult !== 'object') {\n            return { error: 'Unknown Error' };\n        }\n\n        if (rawResult.hasOwnProperty('error')) {\n            return { error: (rawResult as any).error };\n        }\n\n        if (Array.isArray(rawResult)) {\n            const result: Record<string, ioBroker.Object> = {};\n            for (const index in batch) {\n                const { pattern = undefined } = batch[index];\n                const obj: Record<string, ioBroker.Object> = rawResult[index];\n                if (!pattern) {\n                    for (const [key, value] of Object.entries(obj)) {\n                        result[key] = value as ioBroker.Object;\n                    }\n                } else {\n                    for (const [key, value] of Object.entries(obj)) {\n                        if (\n                            value.common.name &&\n                            typeof value.common.name === 'string' &&\n                            value.common.name.includes(pattern)\n                        ) {\n                            result[key] = value;\n                            continue;\n                        }\n                        if (value.common.name && typeof value.common.name === 'object') {\n                            for (const val of Object.values(value.common.name)) {\n                                if (pattern && val && typeof val === 'string' && val.includes(pattern)) {\n                                    result[key] = value;\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            console.log(Object.keys(result));\n            return { result };\n        }\n        return { error: 'Unknown Error' };\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgD;AAChD,+BAAgC;AAChC,6BAAqE;AACrE,kBAA4C;AAIrC,MAAM,0CAA0C;AAgBvD;AAbI;AAAA,EAFA,AAAC,uCAAW;AAAA,EACZ,AAAC,qCAAS;AAAA,GACV,AAHS,0CAGT;AAIA;AAAA,EAFA,AAAC,uCAAW;AAAA,EACZ,AAAC,qCAAS;AAAA,GACV,AAPS,0CAOT;AAIA;AAAA,EAFA,AAAC,uCAAW;AAAA,EACZ,AAAC,qCAAS;AAAA,GACV,AAXS,0CAWT;AAIA;AAAA,EAFA,AAAC,uCAAW;AAAA,EACZ,AAAC,qCAAS;AAAA,GACV,AAfS,0CAeT;AAGG,MAAM,+CAA+C;AAO5D;AALI;AAAA,EADA,AAAC,uCAAW;AAAA,GACZ,AAFS,+CAET;AAIA;AAAA,EAFA,AAAC,uCAAW;AAAA,EACZ,AAAC,qCAAS;AAAA,GACV,AANS,+CAMT;AAGJ,MAAM,mBAAmB,OAAO,UAAsE;AAClG,MAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,KAAK,GAAG;AACjC,UAAM,IAAI,kCAAoB,kCAAkC;AAAA,EACpE;AACA,aAAW,SAAS,OAAO;AACvB,UAAM,SAAS,8CAAgB,2CAA2C,KAAK;AAC/E,UAAM,SAAS,MAAM,qCAAS,QAAQ,EAAE,WAAW,MAAM,sBAAsB,KAAK,CAAC;AACrF,QAAI,OAAO,SAAS,GAAG;AACnB,cAAQ,IAAI,MAAM;AAClB,YAAM,IAAI,kCAAoB,OAAO,OAAQ,OAAe,GAAG,WAAW,CAAC;AAAA,IAC/E;AAAA,EACJ;AACA;AACJ;AAGO,IAAM,sBAAN,MAA0B;AAAA,EAC7B,MAAM,sCAAsC;AAAA,IACxC,OAAO;AAAA,IACP,UAAU;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA,KACiD;AAxDnE;AAyDQ,UAAM,oBAAoB,6BAAW,YAAX,mBAAoB,uBAAuB,MAAM;AAC3E,UAAM,gBAAgB,IAAI,QAAQ,CAAC,YAAY;AAC3C,iBAAW,SAAS,SAAS,EAAE,OAAO,4CAA4C,YAAY,CAAC;AAAA,IACnG,CAAC;AACD,UAAM,SAAS,MAAM,QAAQ,KAAK,CAAC,mBAAmB,aAAa,CAAC;AACpE,QAAI,UAAU,OAAO,WAAW,YAAY,CAAC,SAAS;AAClD,aAAO,EAAE,OAAO;AAAA,IACpB;AACA,QAAI,UAAU,OAAO,WAAW,UAAU;AACtC,YAAM,YAAiC,CAAC;AACxC,iBAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,MAAM,GAAG;AAC/C,YAAI,MAAM,OAAO,QAAQ,OAAO,MAAM,OAAO,SAAS,YAAY,MAAM,OAAO,KAAK,SAAS,OAAO,GAAG;AACnG,oBAAU,OAAO;AACjB;AAAA,QACJ;AACA,YAAI,MAAM,OAAO,QAAQ,OAAO,MAAM,OAAO,SAAS,UAAU;AAC5D,qBAAW,OAAO,OAAO,OAAO,MAAM,OAAO,IAAI,GAAG;AAChD,gBAAI,WAAW,OAAO,OAAO,QAAQ,YAAY,IAAI,SAAS,OAAO,GAAG;AACpE,wBAAU,OAAO;AACjB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,IAAI,OAAO,KAAK,SAAS,CAAC;AAClC,aAAO,EAAE,QAAQ,UAAU;AAAA,IAC/B;AACA,WAAO,EAAE,OAAO,OAAO;AAAA,EAC3B;AAAA,EACA,MAAM,2CAA2C;AAAA,IAC7C,QAAQ,CAAC;AAAA,IACT,UAAU;AAAA,KACsD;AAzFxE;AA0FQ,UAAM,iBAAiB,KAAK;AAE5B,UAAM,WAAW,CAAC;AAClB,eAAW,EAAE,OAAO,QAAW,OAAO,SAAS,OAAO;AAClD,eAAS,KAAK,6BAAW,YAAX,mBAAoB,uBAAuB,MAAM,KAAK;AAAA,IACxE;AACA,UAAM,cAAc,QAAQ,IAAI,QAAQ;AACxC,UAAM,gBAAgB,IAAI,QAAQ,CAAC,YAAY;AAC3C,iBAAW,SAAS,SAAS,EAAE,OAAO,4CAA4C,YAAY,CAAC;AAAA,IACnG,CAAC;AACD,UAAM,YAAY,MAAM,QAAQ,KAAK,CAAC,aAAa,aAAa,CAAC;AAEjE,QAAI,CAAC,aAAa,OAAO,cAAc,UAAU;AAC7C,aAAO,EAAE,OAAO,gBAAgB;AAAA,IACpC;AAEA,QAAI,UAAU,eAAe,OAAO,GAAG;AACnC,aAAO,EAAE,OAAQ,UAAkB,MAAM;AAAA,IAC7C;AAEA,QAAI,MAAM,QAAQ,SAAS,GAAG;AAC1B,YAAM,SAA0C,CAAC;AACjD,iBAAW,SAAS,OAAO;AACvB,cAAM,EAAE,UAAU,WAAc,MAAM;AACtC,cAAM,MAAuC,UAAU;AACvD,YAAI,CAAC,SAAS;AACV,qBAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,GAAG,GAAG;AAC5C,mBAAO,OAAO;AAAA,UAClB;AAAA,QACJ,OAAO;AACH,qBAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,GAAG,GAAG;AAC5C,gBACI,MAAM,OAAO,QACb,OAAO,MAAM,OAAO,SAAS,YAC7B,MAAM,OAAO,KAAK,SAAS,OAAO,GACpC;AACE,qBAAO,OAAO;AACd;AAAA,YACJ;AACA,gBAAI,MAAM,OAAO,QAAQ,OAAO,MAAM,OAAO,SAAS,UAAU;AAC5D,yBAAW,OAAO,OAAO,OAAO,MAAM,OAAO,IAAI,GAAG;AAChD,oBAAI,WAAW,OAAO,OAAO,QAAQ,YAAY,IAAI,SAAS,OAAO,GAAG;AACpE,yBAAO,OAAO;AACd;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,IAAI,OAAO,KAAK,MAAM,CAAC;AAC/B,aAAO,EAAE,OAAO;AAAA,IACpB;AACA,WAAO,EAAE,OAAO,gBAAgB;AAAA,EACpC;AACJ;AA/Fa,sBAAN;AAAA,EADP,AAAC,8BAAW;AAAA,GACC;",
  "names": []
}
