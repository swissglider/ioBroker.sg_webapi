{
  "version": 3,
  "sources": ["../../../../src/nestjs/iobroker/services/url-notification-subscription-service.ts"],
  "sourcesContent": ["import { HttpService } from '@nestjs/axios';\nimport { BadRequestException, GatewayTimeoutException, Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { IsArray, IsBoolean, IsNotEmpty, IsNumber, IsOptional, IsString } from 'class-validator';\nimport { AdapterStr, DEFAULT_TIMEOUT } from '../../main';\nimport { Result } from '../interfaces/result.interface';\n\nconst _URL_SUBSCRIPTION: Record<string, string[]> = {};\nconst httpService = new HttpService();\n\nexport class AddURLNotification_DTO {\n    @IsNotEmpty()\n    @IsString()\n    stateID!: string;\n\n    @IsNotEmpty()\n    @IsArray()\n    urls!: string[];\n\n    @IsOptional()\n    @IsNumber()\n    timeout?: number;\n\n    @IsOptional()\n    @IsBoolean()\n    forceOverwritte?: boolean;\n}\n\nexport class DeleteURLNotification_DTO {\n    @IsNotEmpty()\n    @IsArray()\n    stateID!: string;\n\n    @IsNotEmpty()\n    @IsArray()\n    urls!: string[];\n\n    @IsOptional()\n    @IsNumber()\n    timeout?: number;\n}\n\nexport const listen = async (\n    id: string,\n    state: ioBroker.State | null | undefined,\n    operation: 'change' | 'deletion',\n): Promise<void> => {\n    if (operation === 'deletion') {\n    } else {\n        if (_URL_SUBSCRIPTION.hasOwnProperty(id)) {\n            for (const url of _URL_SUBSCRIPTION[id]) {\n                try {\n                    await httpService.axiosRef.post(url, { id: id, state: state });\n                } catch (error) {\n                    AdapterStr.adapter?.log.error(`${error} - url: ${url}`);\n                }\n            }\n        }\n    }\n};\n\nexport const UrlNotificationSubscriptionServiceListener = {\n    listen: listen,\n};\n\n@Injectable()\nexport class URLNotificationSubscriptionService {\n    /**\n     * adds the stateID and the urls to existing ones or creates it\n     * @param AddURLNotification_DTO\n     * @returns Result Promise with {result: _URL_SUBSCRIPTION {}}\n     */\n    public addURLNotificationSubscription = async ({\n        stateID,\n        urls,\n        timeout = DEFAULT_TIMEOUT,\n        forceOverwritte = false,\n    }: AddURLNotification_DTO): Promise<Result> => {\n        AdapterStr.adapter?.log.silly('URLNotificationSubscriptionService');\n\n        const adapter = AdapterStr.adapter;\n        if (!adapter) throw new InternalServerErrorException('ioBroker adapter not set ??');\n\n        // check if stateID is availavle\n        const a = await adapter.getForeignStateAsync(stateID);\n        if (!a) throw new BadRequestException(`the stateID: ${stateID} was not found on ioBroker`);\n\n        // create _URL_SUBSCRIPTION for the stateID\n        if (!_URL_SUBSCRIPTION.hasOwnProperty(stateID)) {\n            _URL_SUBSCRIPTION[stateID] = [];\n\n            // add the subscription if not yet done\n            const resultPromise = adapter.subscribeForeignStatesAsync(stateID);\n            const timeoutPromise = new Promise((resolve) => {\n                setTimeout(resolve, timeout, { errorTM: '' });\n            });\n            const result1: any = await Promise.race([resultPromise, timeoutPromise]);\n            if (result1.hasOwnProperty('error')) {\n                throw new InternalServerErrorException(`Error while subscribe to ${stateID}`);\n            }\n            if (result1.hasOwnProperty('errorTM')) {\n                throw new GatewayTimeoutException(`TimeoutError after ${timeout}ms`);\n            }\n        }\n\n        if (forceOverwritte) {\n            _URL_SUBSCRIPTION[stateID] = [];\n        }\n\n        for (const url of urls) {\n            if (!_URL_SUBSCRIPTION[stateID].includes(url)) {\n                _URL_SUBSCRIPTION[stateID].push(url);\n            }\n        }\n        return { result: _URL_SUBSCRIPTION };\n    };\n\n    /**\n     * get list with stateID's and the URL's\n     * @returns Result with {result:_URL_SUBSCRIPTION {}}\n     */\n    public getURLNotificationSubscriptionList = (): Result => {\n        AdapterStr.adapter?.log.silly('getURLNotificationSubscriptionList');\n        return { result: _URL_SUBSCRIPTION };\n    };\n\n    /**\n     * delete all the URLNotificationSubscriptions\n     * @returns Result Promise with {result: _URL_SUBSCRIPTION {}}\n     */\n    public deleteAllURLNotificationSubscriptions = async (): Promise<Result> => {\n        AdapterStr.adapter?.log.silly('deleteAllURLNotificationSubscriptions');\n\n        const adapter = AdapterStr.adapter;\n        if (!adapter) throw new InternalServerErrorException('ioBroker adapter not set ??');\n\n        for (const id of Object.keys(_URL_SUBSCRIPTION)) {\n            await adapter.unsubscribeForeignStatesAsync(id);\n        }\n        for (const id of Object.keys(_URL_SUBSCRIPTION)) {\n            delete _URL_SUBSCRIPTION[id];\n        }\n\n        return { result: _URL_SUBSCRIPTION };\n    };\n\n    public deleteURLNotificationSubscriptions = async (props: DeleteURLNotification_DTO[]): Promise<Result> => {\n        AdapterStr.adapter?.log.silly('deleteURLNotificationSubscriptions');\n\n        const adapter = AdapterStr.adapter;\n        if (!adapter) throw new InternalServerErrorException('ioBroker adapter not set ??');\n\n        for (const mapping of props) {\n            if (_URL_SUBSCRIPTION.hasOwnProperty(mapping.stateID)) {\n                _URL_SUBSCRIPTION[mapping.stateID] = _URL_SUBSCRIPTION[mapping.stateID].filter(\n                    (e) => !mapping.urls.includes(e),\n                );\n                if (_URL_SUBSCRIPTION[mapping.stateID].length == 0) {\n                    delete _URL_SUBSCRIPTION[mapping.stateID];\n                }\n            }\n        }\n\n        return { result: _URL_SUBSCRIPTION };\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
