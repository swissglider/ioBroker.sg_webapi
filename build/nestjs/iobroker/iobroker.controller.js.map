{
  "version": 3,
  "sources": ["../../../src/nestjs/iobroker/iobroker.controller.ts"],
  "sourcesContent": ["import { Body, Controller, Get, Post, Query, UsePipes } from '@nestjs/common';\nimport { DEFAULT_TIMEOUT } from '../main';\nimport { ValidationPipe } from '../validation.pipe';\nimport { Result } from './interfaces/result.interface';\nimport { AllInstanceService, GetAllInstanceNames_DTO } from './services/all-instances.service';\nimport { MIIOService, MIIO_DTO } from './services/miio-service';\nimport {\n    SearchAllTypesWithNamePatternIncludesBatch_DTO,\n    SearchAllTypesWithNamePatternIncludes_DTO,\n    SearchObjectService,\n} from './services/search-object.service';\nimport { SendToService, SendTo_DTO } from './services/send-to.service';\n\n@Controller('iobroker')\nexport class IobrokerController {\n    constructor(\n        private allInstanceServise: AllInstanceService,\n        private searchObjectService: SearchObjectService,\n        private sendToService: SendToService,\n        private mIIOService: MIIOService,\n    ) {\n        this.allInstanceServise = new AllInstanceService();\n        this.searchObjectService = new SearchObjectService();\n        this.mIIOService = new MIIOService();\n    }\n\n    @Get('allInstanceNames')\n    @UsePipes(new ValidationPipe({ meta: GetAllInstanceNames_DTO }))\n    async getAllInstanceNames(@Query() { timeout = DEFAULT_TIMEOUT }: GetAllInstanceNames_DTO): Promise<Result> {\n        console.log('==== Start getAllInstanceNames 1 ====');\n        return this.allInstanceServise.getAllInstanceNames({ timeout });\n    }\n\n    @Get('searchAllTypesWithNamePatternIncludes')\n    @UsePipes(new ValidationPipe({ meta: SearchAllTypesWithNamePatternIncludes_DTO }))\n    async searchAllTypesWithNamePatternIncludes(\n        @Query() { type, pattern, timeout = DEFAULT_TIMEOUT, path = '*' }: SearchAllTypesWithNamePatternIncludes_DTO,\n    ): Promise<Result> {\n        return this.searchObjectService.searchAllTypesWithNamePatternIncludes({ type, pattern, timeout, path });\n    }\n\n    @Post('searchAllTypesWithNamePatternIncludesBatch')\n    @UsePipes(new ValidationPipe({ meta: SearchAllTypesWithNamePatternIncludesBatch_DTO }))\n    async searchAllTypesWithNamePatternIncludesBatch(\n        @Body() { batch, timeout = DEFAULT_TIMEOUT }: SearchAllTypesWithNamePatternIncludesBatch_DTO,\n    ): Promise<Result> {\n        return this.searchObjectService.searchAllTypesWithNamePatternIncludesBatch({ batch, timeout });\n    }\n\n    @Post('sendTo')\n    public async sendTo(\n        @Body() { instance, command, message = {}, timeout = DEFAULT_TIMEOUT }: SendTo_DTO,\n    ): Promise<Result> {\n        return this.sendToService.sendTo({ instance, command, message, timeout });\n    }\n\n    @Post('miioGetSimpleMappingPost')\n    public async miioGetSimpleMappingPost(\n        @Body() { login, password, country, timeout = DEFAULT_TIMEOUT }: MIIO_DTO,\n    ): Promise<Result> {\n        return this.mIIOService.getSimpleMapping({ login, password, country, timeout });\n    }\n\n    @Get('miioGetSimpleMappingGet')\n    public async miioGetSimpleMappingGet(): Promise<any> {\n        return this.mIIOService.getSimpleMappingAll();\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA6D;AAC7D,kBAAgC;AAChC,wBAA+B;AAE/B,2BAA4D;AAC5D,0BAAsC;AACtC,2BAIO;AAIA,IAAM,qBAAN,MAAyB;AAAA,EAC5B,YACY,oBACA,qBACA,eACA,aACV;AAJU;AACA;AACA;AACA;AAER,SAAK,qBAAqB,IAAI,wCAAmB;AACjD,SAAK,sBAAsB,IAAI,yCAAoB;AACnD,SAAK,cAAc,IAAI,gCAAY;AAAA,EACvC;AAAA,EAIA,MAAM,oBAA6B,EAAE,UAAU,+BAA6D;AACxG,YAAQ,IAAI,uCAAuC;AACnD,WAAO,KAAK,mBAAmB,oBAAoB,EAAE,QAAQ,CAAC;AAAA,EAClE;AAAA,EAIA,MAAM,sCACO,EAAE,MAAM,SAAS,UAAU,6BAAiB,OAAO,OAC7C;AACf,WAAO,KAAK,oBAAoB,sCAAsC,EAAE,MAAM,SAAS,SAAS,KAAK,CAAC;AAAA,EAC1G;AAAA,EAIA,MAAM,2CACM,EAAE,OAAO,UAAU,+BACZ;AACf,WAAO,KAAK,oBAAoB,2CAA2C,EAAE,OAAO,QAAQ,CAAC;AAAA,EACjG;AAAA,EAGA,MAAa,OACD,EAAE,UAAU,SAAS,UAAU,CAAC,GAAG,UAAU,+BACtC;AACf,WAAO,KAAK,cAAc,OAAO,EAAE,UAAU,SAAS,SAAS,QAAQ,CAAC;AAAA,EAC5E;AAAA,EAGA,MAAa,yBACD,EAAE,OAAO,UAAU,SAAS,UAAU,+BAC/B;AACf,WAAO,KAAK,YAAY,iBAAiB,EAAE,OAAO,UAAU,SAAS,QAAQ,CAAC;AAAA,EAClF;AAAA,EAGA,MAAa,0BAAwC;AACjD,WAAO,KAAK,YAAY,oBAAoB;AAAA,EAChD;AACJ;AAvCU;AAAA,EAFN,AAAC,uBAAI,kBAAkB;AAAA,EACvB,AAAC,4BAAS,IAAI,iCAAe,EAAE,MAAM,6CAAwB,CAAC,CAAC;AAAA,EACrC,mBAAC,yBAAM;AAAA,GAA3B,AAdG,mBAcH;AAOA;AAAA,EAFN,AAAC,uBAAI,uCAAuC;AAAA,EAC5C,AAAC,4BAAS,IAAI,iCAAe,EAAE,MAAM,+DAA0C,CAAC,CAAC;AAAA,EAE7E,mBAAC,yBAAM;AAAA,GADL,AArBG,mBAqBH;AAQA;AAAA,EAFN,AAAC,wBAAK,4CAA4C;AAAA,EAClD,AAAC,4BAAS,IAAI,iCAAe,EAAE,MAAM,oEAA+C,CAAC,CAAC;AAAA,EAElF,mBAAC,wBAAK;AAAA,GADJ,AA7BG,mBA6BH;AAOO;AAAA,EADb,AAAC,wBAAK,QAAQ;AAAA,EAEV,mBAAC,wBAAK;AAAA,GADG,AApCJ,mBAoCI;AAOA;AAAA,EADb,AAAC,wBAAK,0BAA0B;AAAA,EAE5B,mBAAC,wBAAK;AAAA,GADG,AA3CJ,mBA2CI;AAOA;AAAA,EADb,AAAC,uBAAI,yBAAyB;AAAA,GACjB,AAlDJ,mBAkDI;AAlDJ,qBAAN;AAAA,EADP,AAAC,8BAAW,UAAU;AAAA,GACT;",
  "names": []
}
