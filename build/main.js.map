{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.1.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { getFullSimpleDeviceList } from './nestjs/iobroker/services/miio-service';\nimport bootstrap from './nestjs/main';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nlet MIOO_intervall: ioBroker.Interval;\n\nclass SgWebapi extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'sg_webapi',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.log.warn('onReady1');\n        bootstrap(this);\n        if (this.config.MIIO_autoRefresh) {\n            getFullSimpleDeviceList();\n            MIOO_intervall = this.setInterval(() => {\n                getFullSimpleDeviceList();\n            }, this.config['MIIO_autoRefreshTimeout'] ?? 50000);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n            this.clearInterval(MIOO_intervall);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    // private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n    //     if (this.config.MIIO_autoRefresh) {\n    //         this.log.error(id);\n    //     }\n    //     this.log.warn('hallo');\n    //     if (state) {\n    //         // The state was changed\n    //         this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n    //     } else {\n    //         // The state was deleted\n    //         this.log.info(`state ${id} deleted`);\n    //     }\n    // }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SgWebapi(options);\n} else {\n    // otherwise start the instance directly\n    (() => new SgWebapi())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,0BAAwC;AACxC,kBAAsB;AAKtB,IAAI;AAEJ,MAAM,iBAAiB,MAAM,QAAQ;AAAA,EACjC,AAAO,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAIxC,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AA/B3C;AAgCQ,SAAK,IAAI,KAAK,UAAU;AACxB,6BAAU,IAAI;AACd,QAAI,KAAK,OAAO,kBAAkB;AAC9B,uDAAwB;AACxB,uBAAiB,KAAK,YAAY,MAAM;AACpC,yDAAwB;AAAA,MAC5B,GAAG,WAAK,OAAO,+BAAZ,YAA0C,GAAK;AAAA,IACtD;AAAA,EACJ;AAAA,EAKA,MAAc,SAAS,UAAqC;AACxD,QAAI;AAMA,WAAK,cAAc,cAAc;AAEjC,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAkDJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,SAAS,OAAO;AACjG,OAAO;AAEH,EAAC,OAAM,IAAI,SAAS,GAAG;AAC3B;",
  "names": []
}
